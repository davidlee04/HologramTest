{"ast":null,"code":"var _jsxFileName = \"/Users/david/coding/hologramtest/src/App.js\",\n  _s = $RefreshSig$();\nimport \"./App.css\";\nimport React, { useState } from \"react\";\nimport Web3 from \"web3\";\nimport { Alchemy, Network } from \"alchemy-sdk\";\nimport NFTCard from \"./components/NFTCard.jsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst config = {\n  apiKey: \"oj3HEIzyiXxRP3VxIkyw6ytYYwg5pwxA\",\n  network: Network.ETH_MAINNET\n};\nconst alchemy = new Alchemy(config);\nfunction App() {\n  _s();\n  let web3;\n  let address;\n  let testAddress = \"0x5e765C6A318502FF2F6eF0D951e84F8dAE7FA3c9\";\n  const [nftList, setNFTList] = useState([]);\n  const connectWalletHandler = async () => {\n    if (typeof window !== \"undefined\" && typeof window.ethereum !== \"undefined\") {\n      try {\n        await window.ethereum.request({\n          method: \"eth_requestAccounts\"\n        });\n        web3 = new Web3(window.ethereum);\n        web3.eth.requestAccounts().then(loadAddress);\n      } catch (e) {\n        console.log(e.message);\n      }\n    } else {\n      alert(\"MetaMask not installed\");\n    }\n  };\n  const loadAddress = walletAddress => {\n    address = walletAddress[0];\n  };\n  const loadNFTHandler = async () => {\n    const nfts = await alchemy.nft.getNftsForOwner(testAddress);\n    // console.log(nfts.ownedNfts[0]);\n    let cardList = [];\n    // nfts.ownedNfts.forEach((nft) => {\n    //     let url = nft.media[0].gateway;\n    //     cardList.push(<NFTCard imgURL={url} name={nft.title}></NFTCard>);\n    // });\n    for (let i = 0; i < nfts.totalCount; i++) {\n      if (nfts.ownedNfts[i] === undefined) {\n        continue;\n      }\n      if (nfts.ownedNfts[i].media[0] === undefined) {\n        continue;\n      }\n      if (nfts.ownedNfts[i].media[0].gateway === undefined) {\n        continue;\n      }\n      // console.log(i);\n      // console.log(nfts.ownedNfts[i]);\n      // console.log(nfts.ownedNfts[i].media[0]);\n      cardList.push( /*#__PURE__*/_jsxDEV(NFTCard, {\n        imgURL: nfts.ownedNfts[i].media[0].gateway,\n        name: nfts.ownedNfts[i].title\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this));\n    }\n    setNFTList(cardList);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Welcome\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: connectWalletHandler,\n      children: \"Connect Wallet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: loadNFTHandler,\n      children: \"Load NFTs\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"wrapper\",\n      children: nftList\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"DIZAMzyuNntNUyuVYlyEviLWLx4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Web3","Alchemy","Network","NFTCard","jsxDEV","_jsxDEV","config","apiKey","network","ETH_MAINNET","alchemy","App","_s","web3","address","testAddress","nftList","setNFTList","connectWalletHandler","window","ethereum","request","method","eth","requestAccounts","then","loadAddress","e","console","log","message","alert","walletAddress","loadNFTHandler","nfts","nft","getNftsForOwner","cardList","i","totalCount","ownedNfts","undefined","media","gateway","push","imgURL","name","title","fileName","_jsxFileName","lineNumber","columnNumber","className","children","onClick","class","_c","$RefreshReg$"],"sources":["/Users/david/coding/hologramtest/src/App.js"],"sourcesContent":["import \"./App.css\";\nimport React, { useState } from \"react\";\nimport Web3 from \"web3\";\nimport { Alchemy, Network } from \"alchemy-sdk\";\nimport NFTCard from \"./components/NFTCard.jsx\";\n\nconst config = {\n    apiKey: \"oj3HEIzyiXxRP3VxIkyw6ytYYwg5pwxA\",\n    network: Network.ETH_MAINNET,\n};\nconst alchemy = new Alchemy(config);\n\nfunction App() {\n    let web3;\n    let address;\n    let testAddress = \"0x5e765C6A318502FF2F6eF0D951e84F8dAE7FA3c9\";\n    const [nftList, setNFTList] = useState([]);\n    const connectWalletHandler = async () => {\n        if (\n            typeof window !== \"undefined\" &&\n            typeof window.ethereum !== \"undefined\"\n        ) {\n            try {\n                await window.ethereum.request({\n                    method: \"eth_requestAccounts\",\n                });\n                web3 = new Web3(window.ethereum);\n                web3.eth.requestAccounts().then(loadAddress);\n            } catch (e) {\n                console.log(e.message);\n            }\n        } else {\n            alert(\"MetaMask not installed\");\n        }\n    };\n    const loadAddress = (walletAddress) => {\n        address = walletAddress[0];\n    };\n    const loadNFTHandler = async () => {\n        const nfts = await alchemy.nft.getNftsForOwner(testAddress);\n        // console.log(nfts.ownedNfts[0]);\n        let cardList = [];\n        // nfts.ownedNfts.forEach((nft) => {\n        //     let url = nft.media[0].gateway;\n        //     cardList.push(<NFTCard imgURL={url} name={nft.title}></NFTCard>);\n        // });\n        for (let i = 0; i < nfts.totalCount; i++) {\n            if (nfts.ownedNfts[i] === undefined) {\n                continue;\n            }\n            if (nfts.ownedNfts[i].media[0] === undefined) {\n                continue;\n            }\n            if (nfts.ownedNfts[i].media[0].gateway === undefined) {\n                continue;\n            }\n            // console.log(i);\n            // console.log(nfts.ownedNfts[i]);\n            // console.log(nfts.ownedNfts[i].media[0]);\n            cardList.push(\n                <NFTCard\n                    key={i}\n                    imgURL={nfts.ownedNfts[i].media[0].gateway}\n                    name={nfts.ownedNfts[i].title}\n                ></NFTCard>\n            );\n        }\n        setNFTList(cardList);\n    };\n    return (\n        <div className=\"App\">\n            <h1>Welcome</h1>\n            <button onClick={connectWalletHandler}>Connect Wallet</button>\n            <button onClick={loadNFTHandler}>Load NFTs</button>\n            <div class=\"wrapper\">{nftList}</div>\n        </div>\n    );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAO,WAAW;AAClB,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,IAAI,MAAM,MAAM;AACvB,SAASC,OAAO,EAAEC,OAAO,QAAQ,aAAa;AAC9C,OAAOC,OAAO,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,MAAMC,MAAM,GAAG;EACXC,MAAM,EAAE,kCAAkC;EAC1CC,OAAO,EAAEN,OAAO,CAACO;AACrB,CAAC;AACD,MAAMC,OAAO,GAAG,IAAIT,OAAO,CAACK,MAAM,CAAC;AAEnC,SAASK,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACX,IAAIC,IAAI;EACR,IAAIC,OAAO;EACX,IAAIC,WAAW,GAAG,4CAA4C;EAC9D,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAMmB,oBAAoB,GAAG,MAAAA,CAAA,KAAY;IACrC,IACI,OAAOC,MAAM,KAAK,WAAW,IAC7B,OAAOA,MAAM,CAACC,QAAQ,KAAK,WAAW,EACxC;MACE,IAAI;QACA,MAAMD,MAAM,CAACC,QAAQ,CAACC,OAAO,CAAC;UAC1BC,MAAM,EAAE;QACZ,CAAC,CAAC;QACFT,IAAI,GAAG,IAAIb,IAAI,CAACmB,MAAM,CAACC,QAAQ,CAAC;QAChCP,IAAI,CAACU,GAAG,CAACC,eAAe,CAAC,CAAC,CAACC,IAAI,CAACC,WAAW,CAAC;MAChD,CAAC,CAAC,OAAOC,CAAC,EAAE;QACRC,OAAO,CAACC,GAAG,CAACF,CAAC,CAACG,OAAO,CAAC;MAC1B;IACJ,CAAC,MAAM;MACHC,KAAK,CAAC,wBAAwB,CAAC;IACnC;EACJ,CAAC;EACD,MAAML,WAAW,GAAIM,aAAa,IAAK;IACnClB,OAAO,GAAGkB,aAAa,CAAC,CAAC,CAAC;EAC9B,CAAC;EACD,MAAMC,cAAc,GAAG,MAAAA,CAAA,KAAY;IAC/B,MAAMC,IAAI,GAAG,MAAMxB,OAAO,CAACyB,GAAG,CAACC,eAAe,CAACrB,WAAW,CAAC;IAC3D;IACA,IAAIsB,QAAQ,GAAG,EAAE;IACjB;IACA;IACA;IACA;IACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,IAAI,CAACK,UAAU,EAAED,CAAC,EAAE,EAAE;MACtC,IAAIJ,IAAI,CAACM,SAAS,CAACF,CAAC,CAAC,KAAKG,SAAS,EAAE;QACjC;MACJ;MACA,IAAIP,IAAI,CAACM,SAAS,CAACF,CAAC,CAAC,CAACI,KAAK,CAAC,CAAC,CAAC,KAAKD,SAAS,EAAE;QAC1C;MACJ;MACA,IAAIP,IAAI,CAACM,SAAS,CAACF,CAAC,CAAC,CAACI,KAAK,CAAC,CAAC,CAAC,CAACC,OAAO,KAAKF,SAAS,EAAE;QAClD;MACJ;MACA;MACA;MACA;MACAJ,QAAQ,CAACO,IAAI,eACTvC,OAAA,CAACF,OAAO;QAEJ0C,MAAM,EAAEX,IAAI,CAACM,SAAS,CAACF,CAAC,CAAC,CAACI,KAAK,CAAC,CAAC,CAAC,CAACC,OAAQ;QAC3CG,IAAI,EAAEZ,IAAI,CAACM,SAAS,CAACF,CAAC,CAAC,CAACS;MAAM,GAFzBT,CAAC;QAAAU,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAGA,CACd,CAAC;IACL;IACAlC,UAAU,CAACoB,QAAQ,CAAC;EACxB,CAAC;EACD,oBACIhC,OAAA;IAAK+C,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAChBhD,OAAA;MAAAgD,QAAA,EAAI;IAAO;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAChB9C,OAAA;MAAQiD,OAAO,EAAEpC,oBAAqB;MAAAmC,QAAA,EAAC;IAAc;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAC9D9C,OAAA;MAAQiD,OAAO,EAAErB,cAAe;MAAAoB,QAAA,EAAC;IAAS;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACnD9C,OAAA;MAAKkD,KAAK,EAAC,SAAS;MAAAF,QAAA,EAAErC;IAAO;MAAAgC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACnC,CAAC;AAEd;AAACvC,EAAA,CAjEQD,GAAG;AAAA6C,EAAA,GAAH7C,GAAG;AAmEZ,eAAeA,GAAG;AAAC,IAAA6C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}