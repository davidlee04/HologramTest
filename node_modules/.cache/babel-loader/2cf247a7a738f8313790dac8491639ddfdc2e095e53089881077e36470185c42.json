{"ast":null,"code":"var _jsxFileName = \"/Users/david/coding/hologramtest/src/App.js\",\n  _s = $RefreshSig$();\nimport \"./App.css\";\nimport React, { useState } from \"react\";\nimport Web3 from \"web3\";\nimport { Alchemy, Network } from \"alchemy-sdk\";\nimport NFTCard from \"./components/NFTCard.jsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst config = {\n  apiKey: \"oj3HEIzyiXxRP3VxIkyw6ytYYwg5pwxA\",\n  network: Network.ETH_MAINNET\n};\nconst alchemy = new Alchemy(config);\nfunction App() {\n  _s();\n  let web3;\n  const [imgURL, setImgURL] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [nftList, setNFTList] = useState([]);\n  const connectWalletHandler = async () => {\n    if (typeof window !== \"undefined\" && typeof window.ethereum !== \"undefined\") {\n      try {\n        await window.ethereum.request({\n          method: \"eth_requestAccounts\"\n        });\n        web3 = new Web3(window.ethereum);\n      } catch (e) {\n        console.log(e.message);\n      }\n    } else {\n      alert(\"MetaMask not installed\");\n    }\n  };\n  const loadNFTHandler = async () => {\n    const nfts = await alchemy.nft.getNftsForOwner(\"0x5e765C6A318502FF2F6eF0D951e84F8dAE7FA3c9\");\n    setImgURL(nfts.ownedNfts[0].media[0].gateway);\n    setName(nfts.ownedNfts[0].title);\n    // console.log(nfts.ownedNfts[0]);\n    let cardList = [];\n    // nfts.ownedNfts.forEach((nft) => {\n    //     let url = nft.media[0].gateway;\n    //     cardList.push(<NFTCard imgURL={url} name={nft.title}></NFTCard>);\n    // });\n    for (let i = 0; i < nfts.totalCount; i++) {\n      // cardList.push(\n      //     <NFTCard\n      //         imgURL={nfts.ownedNfts[i].media[0].gateway}\n      //         name={nfts.ownedNfts[i].title}\n      //     ></NFTCard>\n      // );\n      if (nfts.ownedNfts[i] === \"undefined\") {\n        continue;\n      }\n      console.log(nfts.ownedNfts[i].media[0]);\n    }\n    setNFTList(cardList);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Welcome\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: connectWalletHandler,\n      children: \"Connect Wallet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: loadNFTHandler,\n      children: \"Load NFTs\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), nftList]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"6DRbhDpCKjYgtfiXIf21h9jZtc0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Web3","Alchemy","Network","NFTCard","jsxDEV","_jsxDEV","config","apiKey","network","ETH_MAINNET","alchemy","App","_s","web3","imgURL","setImgURL","name","setName","nftList","setNFTList","connectWalletHandler","window","ethereum","request","method","e","console","log","message","alert","loadNFTHandler","nfts","nft","getNftsForOwner","ownedNfts","media","gateway","title","cardList","i","totalCount","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/david/coding/hologramtest/src/App.js"],"sourcesContent":["import \"./App.css\";\nimport React, { useState } from \"react\";\nimport Web3 from \"web3\";\nimport { Alchemy, Network } from \"alchemy-sdk\";\nimport NFTCard from \"./components/NFTCard.jsx\";\n\nconst config = {\n    apiKey: \"oj3HEIzyiXxRP3VxIkyw6ytYYwg5pwxA\",\n    network: Network.ETH_MAINNET,\n};\nconst alchemy = new Alchemy(config);\n\nfunction App() {\n    let web3;\n    const [imgURL, setImgURL] = useState(\"\");\n    const [name, setName] = useState(\"\");\n    const [nftList, setNFTList] = useState([]);\n    const connectWalletHandler = async () => {\n        if (\n            typeof window !== \"undefined\" &&\n            typeof window.ethereum !== \"undefined\"\n        ) {\n            try {\n                await window.ethereum.request({\n                    method: \"eth_requestAccounts\",\n                });\n                web3 = new Web3(window.ethereum);\n            } catch (e) {\n                console.log(e.message);\n            }\n        } else {\n            alert(\"MetaMask not installed\");\n        }\n    };\n    const loadNFTHandler = async () => {\n        const nfts = await alchemy.nft.getNftsForOwner(\n            \"0x5e765C6A318502FF2F6eF0D951e84F8dAE7FA3c9\"\n        );\n        setImgURL(nfts.ownedNfts[0].media[0].gateway);\n        setName(nfts.ownedNfts[0].title);\n        // console.log(nfts.ownedNfts[0]);\n        let cardList = [];\n        // nfts.ownedNfts.forEach((nft) => {\n        //     let url = nft.media[0].gateway;\n        //     cardList.push(<NFTCard imgURL={url} name={nft.title}></NFTCard>);\n        // });\n        for (let i = 0; i < nfts.totalCount; i++) {\n            // cardList.push(\n            //     <NFTCard\n            //         imgURL={nfts.ownedNfts[i].media[0].gateway}\n            //         name={nfts.ownedNfts[i].title}\n            //     ></NFTCard>\n            // );\n            if (nfts.ownedNfts[i] === \"undefined\") {\n                continue;\n            }\n            console.log(nfts.ownedNfts[i].media[0]);\n        }\n        setNFTList(cardList);\n    };\n    return (\n        <div className=\"App\">\n            <h1>Welcome</h1>\n            <button onClick={connectWalletHandler}>Connect Wallet</button>\n            <button onClick={loadNFTHandler}>Load NFTs</button>\n            {nftList}\n        </div>\n    );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}