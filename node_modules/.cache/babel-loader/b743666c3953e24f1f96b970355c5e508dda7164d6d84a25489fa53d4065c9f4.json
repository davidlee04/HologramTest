{"ast":null,"code":"var _jsxFileName = \"/Users/david/coding/hologramtest/src/App.js\",\n  _s = $RefreshSig$();\nimport \"./App.css\";\nimport React, { useState } from \"react\";\nimport Web3 from \"web3\";\nimport { Alchemy, Network } from \"alchemy-sdk\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst config = {\n  apiKey: \"oj3HEIzyiXxRP3VxIkyw6ytYYwg5pwxA\",\n  network: Network.ETH_MAINNET\n};\nconst alchemy = new Alchemy(config);\nfunction App() {\n  _s();\n  let web3;\n  const [imgURL, setImgURL] = useState(\"\");\n  const connectWalletHandler = async () => {\n    if (typeof window !== \"undefined\" && typeof window.ethereum !== \"undefined\") {\n      try {\n        await window.ethereum.request({\n          method: \"eth_requestAccounts\"\n        });\n        web3 = new Web3(window.ethereum);\n      } catch (e) {\n        console.log(e.message);\n      }\n    } else {\n      alert(\"MetaMask not installed\");\n    }\n  };\n  const loadNFTHandler = async () => {\n    const nfts = await alchemy.nft.getNftsForOwner(\"0x5e765C6A318502FF2F6eF0D951e84F8dAE7FA3c9\");\n    // console.log(nfts.ownedNfts);\n    setImgURL(nfts.ownedNfts[0].media[0]);\n    console.log(nfts.ownedNfts[0].media[0]);\n    // console.log(nfts);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Welcome\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: connectWalletHandler,\n      children: \"Connect Wallet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: loadNFTHandler,\n      children: \"Load NFTs\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: imgURL\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"4fRfNpJ+MBexa10e6xfmBehyadc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Web3","Alchemy","Network","jsxDEV","_jsxDEV","config","apiKey","network","ETH_MAINNET","alchemy","App","_s","web3","imgURL","setImgURL","connectWalletHandler","window","ethereum","request","method","e","console","log","message","alert","loadNFTHandler","nfts","nft","getNftsForOwner","ownedNfts","media","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","src","_c","$RefreshReg$"],"sources":["/Users/david/coding/hologramtest/src/App.js"],"sourcesContent":["import \"./App.css\";\nimport React, { useState } from \"react\";\nimport Web3 from \"web3\";\nimport { Alchemy, Network } from \"alchemy-sdk\";\n\nconst config = {\n    apiKey: \"oj3HEIzyiXxRP3VxIkyw6ytYYwg5pwxA\",\n    network: Network.ETH_MAINNET,\n};\nconst alchemy = new Alchemy(config);\n\nfunction App() {\n    let web3;\n    const [imgURL, setImgURL] = useState(\"\");\n    const connectWalletHandler = async () => {\n        if (\n            typeof window !== \"undefined\" &&\n            typeof window.ethereum !== \"undefined\"\n        ) {\n            try {\n                await window.ethereum.request({\n                    method: \"eth_requestAccounts\",\n                });\n                web3 = new Web3(window.ethereum);\n            } catch (e) {\n                console.log(e.message);\n            }\n        } else {\n            alert(\"MetaMask not installed\");\n        }\n    };\n    const loadNFTHandler = async () => {\n        const nfts = await alchemy.nft.getNftsForOwner(\n            \"0x5e765C6A318502FF2F6eF0D951e84F8dAE7FA3c9\"\n        );\n        // console.log(nfts.ownedNfts);\n        setImgURL(nfts.ownedNfts[0].media[0]);\n        console.log(nfts.ownedNfts[0].media[0]);\n        // console.log(nfts);\n    };\n    return (\n        <div className=\"App\">\n            <h1>Welcome</h1>\n            <button onClick={connectWalletHandler}>Connect Wallet</button>\n            <button onClick={loadNFTHandler}>Load NFTs</button>\n            <img src={imgURL}></img>\n        </div>\n    );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAO,WAAW;AAClB,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,IAAI,MAAM,MAAM;AACvB,SAASC,OAAO,EAAEC,OAAO,QAAQ,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,MAAMC,MAAM,GAAG;EACXC,MAAM,EAAE,kCAAkC;EAC1CC,OAAO,EAAEL,OAAO,CAACM;AACrB,CAAC;AACD,MAAMC,OAAO,GAAG,IAAIR,OAAO,CAACI,MAAM,CAAC;AAEnC,SAASK,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACX,IAAIC,IAAI;EACR,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAMgB,oBAAoB,GAAG,MAAAA,CAAA,KAAY;IACrC,IACI,OAAOC,MAAM,KAAK,WAAW,IAC7B,OAAOA,MAAM,CAACC,QAAQ,KAAK,WAAW,EACxC;MACE,IAAI;QACA,MAAMD,MAAM,CAACC,QAAQ,CAACC,OAAO,CAAC;UAC1BC,MAAM,EAAE;QACZ,CAAC,CAAC;QACFP,IAAI,GAAG,IAAIZ,IAAI,CAACgB,MAAM,CAACC,QAAQ,CAAC;MACpC,CAAC,CAAC,OAAOG,CAAC,EAAE;QACRC,OAAO,CAACC,GAAG,CAACF,CAAC,CAACG,OAAO,CAAC;MAC1B;IACJ,CAAC,MAAM;MACHC,KAAK,CAAC,wBAAwB,CAAC;IACnC;EACJ,CAAC;EACD,MAAMC,cAAc,GAAG,MAAAA,CAAA,KAAY;IAC/B,MAAMC,IAAI,GAAG,MAAMjB,OAAO,CAACkB,GAAG,CAACC,eAAe,CAC1C,4CACJ,CAAC;IACD;IACAd,SAAS,CAACY,IAAI,CAACG,SAAS,CAAC,CAAC,CAAC,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;IACrCT,OAAO,CAACC,GAAG,CAACI,IAAI,CAACG,SAAS,CAAC,CAAC,CAAC,CAACC,KAAK,CAAC,CAAC,CAAC,CAAC;IACvC;EACJ,CAAC;;EACD,oBACI1B,OAAA;IAAK2B,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAChB5B,OAAA;MAAA4B,QAAA,EAAI;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAChBhC,OAAA;MAAQiC,OAAO,EAAEtB,oBAAqB;MAAAiB,QAAA,EAAC;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAC9DhC,OAAA;MAAQiC,OAAO,EAAEZ,cAAe;MAAAO,QAAA,EAAC;IAAS;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACnDhC,OAAA;MAAKkC,GAAG,EAAEzB;IAAO;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACvB,CAAC;AAEd;AAACzB,EAAA,CArCQD,GAAG;AAAA6B,EAAA,GAAH7B,GAAG;AAuCZ,eAAeA,GAAG;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}